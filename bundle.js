/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/JS/index.js":
/*!*************************!*\
  !*** ./src/JS/index.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _CSS_styles_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../CSS/styles.css */ \"./src/CSS/styles.css\");\n/* harmony import */ var _modules_UI__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/UI */ \"./src/JS/modules/UI.js\");\n/* harmony import */ var _img_calendar_today_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../img/calendar-today.svg */ \"./src/img/calendar-today.svg\");\n/* harmony import */ var _img_calendar_week_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../img/calendar-week.svg */ \"./src/img/calendar-week.svg\");\n/* harmony import */ var _img_inbox_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../img/inbox.svg */ \"./src/img/inbox.svg\");\n/* harmony import */ var _img_plus_box_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../img/plus-box.svg */ \"./src/img/plus-box.svg\");\n/* harmony import */ var _img_checkbox_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../img/checkbox.svg */ \"./src/img/checkbox.svg\");\n/* harmony import */ var _img_delete_svg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../img/delete.svg */ \"./src/img/delete.svg\");\n/* harmony import */ var _img_project_svg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../img/project.svg */ \"./src/img/project.svg\");\n/* harmony import */ var _img_add_task_svg__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../img/add-task.svg */ \"./src/img/add-task.svg\");\n// Importing the CSS file\n\n\n\n// Importing images\n\n\n\n\n\n\n\n\n\n// Function to initialize images\nconst initializeImages = () => {\n  // Default project icons\n  const todayIcon = document.getElementById('calendar-today');\n  const weekIcon = document.getElementById('calendar-week');\n  const inboxIconElement = document.getElementById('inbox');\n  const plusBoxIcon = document.getElementById('plus-box');\n\n  // Set default project icons\n  if (todayIcon) todayIcon.src = _img_calendar_today_svg__WEBPACK_IMPORTED_MODULE_2__;\n  if (weekIcon) weekIcon.src = _img_calendar_week_svg__WEBPACK_IMPORTED_MODULE_3__;\n  if (inboxIconElement) inboxIconElement.src = _img_inbox_svg__WEBPACK_IMPORTED_MODULE_4__;\n  if (plusBoxIcon) plusBoxIcon.src = _img_plus_box_svg__WEBPACK_IMPORTED_MODULE_5__;\n\n  // Set up image sources for dynamically created elements\n  // Store these in CSS as background images or in a global object for UI.js to use\n  document.documentElement.style.setProperty('--checkbox-icon', `url(${_img_checkbox_svg__WEBPACK_IMPORTED_MODULE_6__})`);\n  document.documentElement.style.setProperty('--delete-icon', `url(${_img_delete_svg__WEBPACK_IMPORTED_MODULE_7__})`);\n  document.documentElement.style.setProperty('--project-icon', `url(${_img_project_svg__WEBPACK_IMPORTED_MODULE_8__})`);\n  document.documentElement.style.setProperty('--add-task-icon', `url(${_img_add_task_svg__WEBPACK_IMPORTED_MODULE_9__})`);\n};\n\n// When the DOM content is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  initializeImages();\n  _modules_UI__WEBPACK_IMPORTED_MODULE_1__[\"default\"].loadHomepage();\n});\n\n//# sourceURL=webpack://to-do-list/./src/JS/index.js?");

/***/ }),

/***/ "./src/JS/modules/Project.js":
/*!***********************************!*\
  !*** ./src/JS/modules/Project.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Project)\n/* harmony export */ });\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/isToday.js\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/toDate.js\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/isThisWeek.js\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/subDays.js\");\n// Project.js\n/**\r\n * Project class represents a collection of tasks\r\n * Handles task management operations like adding, deleting, and filtering tasks\r\n */\n\nclass Project {\n  /**\r\n   * Create a new project\r\n   * @param {string} name - The name of the project\r\n   */\n  constructor(name) {\n    this.name = name;\n    this.tasks = []; // Initialize empty tasks array\n  }\n\n  /**\r\n   * Set the project name\r\n   * @param {string} name - New project name\r\n   */\n  setName(name) {\n    if (typeof name !== 'string' || name.trim() === '') {\n      throw new Error('Invalid project name');\n    }\n    this.name = name.trim();\n  }\n\n  /**\r\n   * Get the project name\r\n   * @returns {string} Project name\r\n   */\n  getName() {\n    return this.name;\n  }\n\n  /**\r\n   * Set the project's tasks\r\n   * @param {Array} tasks - Array of Task objects\r\n   */\n  setTasks(tasks) {\n    if (!Array.isArray(tasks)) {\n      throw new Error('Tasks must be an array');\n    }\n    this.tasks = tasks;\n  }\n\n  /**\r\n   * Get all tasks in the project\r\n   * @returns {Array} Array of Task objects\r\n   */\n  getTasks() {\n    return this.tasks;\n  }\n\n  /**\r\n   * Find a specific task by name\r\n   * @param {string} taskName - Name of the task to find\r\n   * @returns {Task|undefined} Found task or undefined\r\n   */\n  getTask(taskName) {\n    return this.tasks.find(task => task.getName() === taskName);\n  }\n\n  /**\r\n   * Check if project contains a task with given name\r\n   * @param {string} taskName - Name to check\r\n   * @returns {boolean} True if task exists\r\n   */\n  contains(taskName) {\n    return this.tasks.some(task => task.getName() === taskName);\n  }\n\n  /**\r\n   * Add a new task to the project\r\n   * @param {Task} newTask - Task object to add\r\n   */\n  addTask(newTask) {\n    console.log(\"🔧 Attempting to add task:\", newTask);\n\n    // Check for duplicate task names\n    const existingTask = this.tasks.find(task => task.getName() === newTask.getName());\n    if (existingTask) {\n      console.warn(\"⚠️ Duplicate task found, skipping:\", newTask.getName());\n      return;\n    }\n    this.tasks.push(newTask);\n    console.log(\"✅ Task added successfully. Current tasks:\", this.tasks.map(task => `${task.getName()} (${task.getDate()})`));\n  }\n  /**\r\n   * Delete a task by name\r\n   * @param {string} taskName - Name of task to delete\r\n   */\n  deleteTask(taskName) {\n    this.tasks = this.tasks.filter(task => task.getName() !== taskName);\n  }\n\n  /**\r\n   * Get tasks due today\r\n   * @returns {Array} Array of tasks due today\r\n   */\n  getTasksToday() {\n    return this.tasks.filter(task => {\n      const taskDate = new Date(task.getDateFormatted());\n      return (0,date_fns__WEBPACK_IMPORTED_MODULE_0__.isToday)((0,date_fns__WEBPACK_IMPORTED_MODULE_1__.toDate)(taskDate));\n    });\n  }\n\n  /**\r\n   * Get tasks due this week\r\n   * @returns {Array} Array of tasks due this week\r\n   */\n  getTasksThisWeek() {\n    return this.tasks.filter(task => {\n      const taskDate = new Date(task.getDateFormatted());\n      return (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.isThisWeek)((0,date_fns__WEBPACK_IMPORTED_MODULE_3__.subDays)((0,date_fns__WEBPACK_IMPORTED_MODULE_1__.toDate)(taskDate), 1));\n    });\n  }\n}\n\n//# sourceURL=webpack://to-do-list/./src/JS/modules/Project.js?");

/***/ }),

/***/ "./src/JS/modules/Storage.js":
/*!***********************************!*\
  !*** ./src/JS/modules/Storage.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Storage)\n/* harmony export */ });\n/* harmony import */ var _Project__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Project */ \"./src/JS/modules/Project.js\");\n/* harmony import */ var _Task__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Task */ \"./src/JS/modules/Task.js\");\n/* harmony import */ var _TodoList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TodoList */ \"./src/JS/modules/TodoList.js\");\n// Import necessary classes for data management\n\n\n\n\n/**\r\n * Storage class manages local browser storage for the TodoList application\r\n * Provides static methods for:\r\n * - Saving todo list data\r\n * - Retrieving saved data\r\n * - Manipulating projects and tasks in persistent storage\r\n */\nclass Storage {\n  /**\r\n   * Save entire TodoList to browser's local storage\r\n   * Converts complex objects to a JSON-serializable format\r\n   * \r\n   * @param {TodoList} data - TodoList object to save\r\n   */\n  static saveTodoList(data) {\n    try {\n      // Create a simplified, serializable representation of todo list\n      const serializedData = {\n        projects: data.getProjects().map(project => ({\n          name: project.getName(),\n          tasks: project.getTasks().map(task => ({\n            name: task.getName(),\n            dueDate: task.getDate(),\n            completed: task.isCompleted()\n          }))\n        }))\n      };\n      console.log(\"💾 Saving TodoList:\", serializedData);\n      // Store serialized data as JSON string\n      localStorage.setItem('todoList', JSON.stringify(serializedData));\n      console.log(\"✅ TodoList Successfully Saved\");\n    } catch (error) {\n      console.error(\"❌ Error saving TodoList:\", error);\n      alert(`Failed to save data: ${error.message}`);\n    }\n  }\n\n  /**\r\n   * Retrieve TodoList from local storage\r\n   * Reconstructs TodoList if data exists, otherwise creates new\r\n   * \r\n   * @returns {TodoList} Reconstructed or new TodoList\r\n   */\n  static getTodoList() {\n    const data = localStorage.getItem('todoList');\n    console.log(\"🔍 Retrieving TodoList:\", data);\n\n    // Return new TodoList if no saved data\n    if (!data) {\n      console.log(\"🆕 No existing TodoList, creating new\");\n      return new _TodoList__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n    }\n    try {\n      const parsedData = JSON.parse(data);\n      const todoList = new _TodoList__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n\n      // Manually reconstruct projects and tasks\n      todoList.setProjects(parsedData.projects.map(projectData => {\n        const project = new _Project__WEBPACK_IMPORTED_MODULE_0__[\"default\"](projectData.name);\n        const reconstructedTasks = projectData.tasks.map(taskData => {\n          const task = new _Task__WEBPACK_IMPORTED_MODULE_1__[\"default\"](taskData.name, taskData.dueDate);\n          task.setCompleted(taskData.completed || false);\n          return task;\n        });\n        project.setTasks(reconstructedTasks);\n        return project;\n      }));\n      console.log(\"📊 Loaded TodoList Projects:\", todoList.getProjects());\n      return todoList;\n    } catch (e) {\n      console.error('Error loading todo list:', e);\n      localStorage.removeItem('todoList');\n      return new _TodoList__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n    }\n  }\n\n  /**\r\n   * Add a new project to TodoList in local storage\r\n   * Prevents duplicate projects\r\n   * \r\n   * @param {Project} project - Project to add\r\n   */\n  static addProject(project) {\n    const todoList = Storage.getTodoList();\n    if (!todoList.projects.some(p => p.name === project.name)) {\n      todoList.addProject(project);\n      Storage.saveTodoList(todoList);\n    }\n  }\n\n  /**\r\n   * Delete a project from TodoList in local storage\r\n   * \r\n   * @param {string} projectName - Name of project to delete\r\n   */\n  static deleteProject(projectName) {\n    const todoList = Storage.getTodoList();\n    todoList.deleteProject(projectName);\n    Storage.saveTodoList(todoList);\n  }\n\n  /**\r\n   * Add a task to a specific project in local storage\r\n   * \r\n   * @param {string} projectName - Name of project to add task to\r\n   * @param {Task} task - Task to add\r\n   */\n  static addTask(projectName, task) {\n    console.log(\"📦 Storing Task:\", task);\n    const todoList = Storage.getTodoList();\n    const project = todoList.getProject(projectName);\n    if (!project) {\n      console.error(\"❌ Project not found:\", projectName);\n      return;\n    }\n    project.addTask(task);\n    Storage.saveTodoList(todoList);\n  }\n\n  /**\r\n   * Delete a task from a specific project in local storage\r\n   * \r\n   * @param {string} projectName - Name of project containing task\r\n   * @param {string} taskName - Name of task to delete\r\n   */\n  static deleteTask(projectName, taskName) {\n    const todoList = Storage.getTodoList();\n    const project = todoList.getProject(projectName);\n\n    // Prevent errors with non-existent projects\n    if (!project) {\n      console.error(`Project ${projectName} not found`);\n      return;\n    }\n    project.deleteTask(taskName);\n    Storage.saveTodoList(todoList);\n  }\n\n  /**\r\n   * Rename an existing task in a project\r\n   * \r\n   * @param {string} projectName - Name of project containing task\r\n   * @param {string} taskName - Current task name\r\n   * @param {string} newTaskName - New task name\r\n   */\n  static renameTask(projectName, taskName, newTaskName) {\n    const todoList = Storage.getTodoList();\n    const project = todoList.getProject(projectName);\n    if (!project) {\n      console.error(`Project ${projectName} not found`);\n      return;\n    }\n\n    // Handle tasks with additional context (e.g., from Today/Week projects)\n    const cleanedTaskName = taskName.split(' (')[0];\n    const task = project.getTasks().find(t => t.getName() === cleanedTaskName);\n    if (!task) {\n      console.warn(`Task ${cleanedTaskName} not found in project ${projectName}`);\n      return;\n    }\n    task.setName(newTaskName);\n    Storage.saveTodoList(todoList);\n  }\n\n  /**\r\n   * Update task due date in a specific project\r\n   * \r\n   * @param {string} projectName - Name of project containing task\r\n   * @param {string} taskName - Name of task to update\r\n   * @param {string} newDueDate - New due date for task\r\n   */\n  static setTaskDate(projectName, taskName, newDueDate) {\n    const todoList = Storage.getTodoList();\n    const project = todoList.getProject(projectName);\n    if (!project) return;\n    const task = project.getTask(taskName);\n    if (!task) return;\n    task.setDate(newDueDate);\n    Storage.saveTodoList(todoList);\n  }\n\n  /**\r\n   * Update default 'Today' project with current day's tasks\r\n   */\n  static updateTodayProject() {\n    const todoList = Storage.getTodoList();\n    todoList.updateTodayProject();\n    Storage.saveTodoList(todoList);\n  }\n\n  /**\r\n   * Update default 'This Week' project with current week's tasks\r\n   */\n  static updateWeekProject() {\n    const todoList = Storage.getTodoList();\n    todoList.updateWeekProject();\n    Storage.saveTodoList(todoList);\n  }\n}\n\n//# sourceURL=webpack://to-do-list/./src/JS/modules/Storage.js?");

/***/ }),

/***/ "./src/JS/modules/Task.js":
/*!********************************!*\
  !*** ./src/JS/modules/Task.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Task)\n/* harmony export */ });\n/**\r\n * Task class represents a single task with a name and due date\r\n * Provides methods for managing task properties with validation\r\n */\nclass Task {\n  /**\r\n   * Create a new task\r\n   * @param {string} name - Task name\r\n   * @param {string} dueDate - Due date in DD/MM/YYYY format (default: 'No date')\r\n   * @throws {Error} If task name is invalid\r\n   */\n  constructor(name, dueDate = 'No date') {\n    if (!name || typeof name !== 'string' || name.trim() === '') {\n      throw new Error('Invalid task name');\n    }\n    this.name = name;\n    this.dueDate = dueDate;\n    this.completed = false;\n  }\n  setCompleted(completed) {\n    this.completed = completed;\n  }\n  isCompleted() {\n    return this.completed;\n  }\n  /**\r\n   * Update task name with validation\r\n   * @param {string} name - New task name\r\n   * @throws {Error} If name is invalid\r\n   */\n  setName(name) {\n    if (typeof name !== 'string' || name.trim() === '') {\n      throw new Error('Invalid task name');\n    }\n    this.name = name.trim();\n  }\n\n  /**\r\n   * Retrieve the current task name\r\n   * @returns {string} Task name\r\n   */\n  getName() {\n    return this.name;\n  }\n\n  /**\r\n   * Set the task's due date with format validation\r\n   * @param {string} dueDate - Due date in DD/MM/YYYY format\r\n   * @throws {Error} If date format is invalid\r\n   */\n  setDate(dueDate) {\n    // Validate date format\n    if (dueDate !== 'No date') {\n      const dateRegex = /^\\d{2}\\/\\d{2}\\/\\d{4}$/;\n      if (!dateRegex.test(dueDate)) {\n        throw new Error('Invalid date format. Use DD/MM/YYYY');\n      }\n    }\n    this.dueDate = dueDate;\n  }\n\n  /**\r\n   * Get the task's due date\r\n   * @returns {string} Due date\r\n   */\n  getDate() {\n    return this.dueDate;\n  }\n\n  /**\r\n   * Get the date formatted for display\r\n   * Converts from DD/MM/YYYY to MM/DD/YYYY\r\n   * @returns {string} Formatted date or 'No date'\r\n   */\n  getDateFormatted() {\n    if (this.dueDate === 'No date') {\n      return this.dueDate;\n    }\n    const [day, month, year] = this.dueDate.split('/');\n    return `${month}/${day}/${year}`;\n  }\n}\n\n//# sourceURL=webpack://to-do-list/./src/JS/modules/Task.js?");

/***/ }),

/***/ "./src/JS/modules/TodoList.js":
/*!************************************!*\
  !*** ./src/JS/modules/TodoList.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TodoList)\n/* harmony export */ });\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/compareAsc.js\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/toDate.js\");\n/* harmony import */ var _Project__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Project */ \"./src/JS/modules/Project.js\");\n/* harmony import */ var _Task__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Task */ \"./src/JS/modules/Task.js\");\n\n\n\nclass TodoList {\n  constructor() {\n    this.projects = [];\n    this.projects.push(new _Project__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('Inbox'));\n    this.projects.push(new _Project__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('Today'));\n    this.projects.push(new _Project__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('This week'));\n  }\n  setProjects(projects) {\n    this.projects = projects;\n  }\n  getProjects() {\n    return this.projects;\n  }\n  getProject(projectName) {\n    return this.projects.find(project => project.getName() === projectName);\n  }\n  contains(projectName) {\n    return this.projects.some(project => project.getName() === projectName);\n  }\n  addProject(newProject) {\n    // Trim the project name and check for empty string\n    const projectName = newProject.name.trim();\n\n    // Prevent empty project names\n    if (!projectName) {\n      throw new Error('Project name cannot be empty');\n    }\n\n    // Check for existing projects case-insensitively\n    const existingProject = this.projects.find(project => project.name.toLowerCase() === projectName.toLowerCase());\n    if (existingProject) {\n      throw new Error('Project names must be unique');\n    }\n    this.projects.push(newProject);\n  }\n  deleteProject(projectName) {\n    const projectToDelete = this.projects.find(project => project.getName() === projectName);\n    this.projects.splice(this.projects.indexOf(projectToDelete), 1);\n  }\n  updateTodayProject() {\n    this.getProject('Today').tasks = [];\n    this.projects.forEach(project => {\n      if (project.getName() === 'Today' || project.getName() === 'This week') return;\n      const todayTasks = project.getTasksToday();\n      todayTasks.forEach(task => {\n        const taskName = `${task.getName()} (${project.getName()})`;\n        this.getProject('Today').addTask(new _Task__WEBPACK_IMPORTED_MODULE_1__[\"default\"](taskName, task.getDate()));\n      });\n    });\n  }\n  updateWeekProject() {\n    this.getProject('This week').tasks = [];\n    this.projects.forEach(project => {\n      if (project.getName() === 'Today' || project.getName() === 'This week') return;\n      const weekTasks = project.getTasksThisWeek();\n      weekTasks.forEach(task => {\n        const taskName = `${task.getName()} (${project.getName()})`;\n        this.getProject('This week').addTask(new _Task__WEBPACK_IMPORTED_MODULE_1__[\"default\"](taskName, task.getDate()));\n      });\n    });\n    this.getProject('This week').setTasks(this.getProject('This week').getTasks().sort((taskA, taskB) => (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.compareAsc)((0,date_fns__WEBPACK_IMPORTED_MODULE_3__.toDate)(new Date(taskA.getDateFormatted())), (0,date_fns__WEBPACK_IMPORTED_MODULE_3__.toDate)(new Date(taskB.getDateFormatted())))));\n  }\n}\n\n//# sourceURL=webpack://to-do-list/./src/JS/modules/TodoList.js?");

/***/ }),

/***/ "./src/JS/modules/UI.js":
/*!******************************!*\
  !*** ./src/JS/modules/UI.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ UI)\n/* harmony export */ });\n/* harmony import */ var _Storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Storage */ \"./src/JS/modules/Storage.js\");\n/* harmony import */ var _Project__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Project */ \"./src/JS/modules/Project.js\");\n/* harmony import */ var _Task__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Task */ \"./src/JS/modules/Task.js\");\n/* harmony import */ var _img_add_task_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../img/add-task.svg */ \"./src/img/add-task.svg\");\n/* harmony import */ var _img_checkbox_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../img/checkbox.svg */ \"./src/img/checkbox.svg\");\n/* harmony import */ var _img_delete_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../img/delete.svg */ \"./src/img/delete.svg\");\n/* harmony import */ var _img_project_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../img/project.svg */ \"./src/img/project.svg\");\n/* harmony import */ var _img_inbox_svg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../img/inbox.svg */ \"./src/img/inbox.svg\");\n/* harmony import */ var _img_calendar_today_svg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../img/calendar-today.svg */ \"./src/img/calendar-today.svg\");\n/* harmony import */ var _img_calendar_week_svg__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../img/calendar-week.svg */ \"./src/img/calendar-week.svg\");\n/* harmony import */ var _CSS_styles_css__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../CSS/styles.css */ \"./src/CSS/styles.css\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass UI {\n  static loadHomepage() {\n    UI.initializeIcons();\n    UI.loadProjects();\n    UI.initProjectButtons();\n    UI.openProject('Inbox', document.getElementById('button-inbox-projects'));\n    document.addEventListener('keydown', UI.handleKeyboardInput);\n  }\n  static initializeIcons() {\n    const plusBoxIcon = document.getElementById('plus-box');\n    if (plusBoxIcon) {\n      plusBoxIcon.src = _img_add_task_svg__WEBPACK_IMPORTED_MODULE_3__;\n    }\n    document.getElementById('inbox').src = _img_inbox_svg__WEBPACK_IMPORTED_MODULE_7__;\n    document.getElementById('calendar-today').src = _img_calendar_today_svg__WEBPACK_IMPORTED_MODULE_8__;\n    document.getElementById('calendar-week').src = _img_calendar_week_svg__WEBPACK_IMPORTED_MODULE_9__;\n    document.getElementById('plus-box').src = _img_add_task_svg__WEBPACK_IMPORTED_MODULE_3__;\n  }\n  static loadProjects() {\n    UI.clearProjects();\n    _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList().getProjects().forEach(project => {\n      if (project.name !== 'Inbox' && project.name !== 'Today' && project.name !== 'This week') {\n        UI.createProject(project.name);\n      }\n    });\n    UI.initAddProjectButtons();\n    UI.initEditProjectName();\n  }\n  static loadTasks(projectName) {\n    console.log(`🔍 Loading Tasks for Project: ${projectName}`);\n    try {\n      const todoList = _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList();\n      if (!todoList) {\n        console.error('TodoList not found in storage');\n        return;\n      }\n      const project = todoList.getProject(projectName);\n      if (!project) {\n        console.error(`Project \"${projectName}\" not found`);\n        return;\n      }\n      const tasks = project.getTasks();\n      if (!tasks) {\n        console.error(`No tasks found for project \"${projectName}\"`);\n        return;\n      }\n      console.log('📋 Tasks Found:', tasks.map(task => `${task.getName()} (${task.getDate()})`));\n      const tasksList = document.getElementById('tasks-list');\n      if (!tasksList) {\n        console.error('Tasks list element not found');\n        return;\n      }\n      tasksList.innerHTML = '';\n      tasks.forEach(task => {\n        console.log(`🚩 Task: ${task.getName()}, Due Date: ${task.getDate()}`);\n        UI.createTask(task.getName(), task.getDate());\n      });\n      if (projectName !== 'Today' && projectName !== 'This week') {\n        UI.initAddTaskButtons();\n      }\n    } catch (error) {\n      console.error('Error loading tasks:', error);\n    }\n  }\n  static loadProjectContent(projectName) {\n    const projectPreview = document.getElementById('project-preview');\n    projectPreview.innerHTML = `\n            <h1 class=\"project-name\" id=\"project-name\">${projectName}</h1>\n            <div class=\"tasks-list\" id=\"tasks-list\"></div>`;\n    if (projectName !== 'Today' && projectName !== 'This week') {\n      projectPreview.innerHTML += `\n            <button class=\"button-add-task\" id=\"button-add-task\">\n                <svg class=\"task-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"/>\n                    <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"/>\n                </svg>\n                Add Task\n            </button>\n            <div class=\"add-task-popup\" id=\"add-task-popup\">\n                <input class=\"input-add-task-popup\" id=\"input-add-task-popup\" type=\"text\" placeholder=\"Enter task name\"/>\n                <div class=\"add-task-popup-buttons\">\n                    <button class=\"button-add-task-popup\" id=\"button-add-task-popup\">Add</button>\n                    <button class=\"button-cancel-task-popup\" id=\"button-cancel-task-popup\">Cancel</button>\n                </div>\n            </div>`;\n      UI.initAddTaskButtons();\n    }\n    UI.loadTasks(projectName);\n  }\n  static createProject(name) {\n    const userProjects = document.getElementById('projects-list');\n    if ([...userProjects.children].some(btn => btn.innerText === name)) return;\n    userProjects.innerHTML += `\n            <button class=\"button-project\" data-project-button>\n                <div class=\"left-project-panel\">\n                    <img src=\"${_img_project_svg__WEBPACK_IMPORTED_MODULE_6__}\" class=\"sidebar-img\" alt=\"Project Icon\"/>\n                    <span>${name}</span>\n                </div>\n                <div class=\"right-project-panel\">\n                    <img src=\"${_img_delete_svg__WEBPACK_IMPORTED_MODULE_5__}\" class=\"delete-icon\" alt=\"Delete Project\"/>\n                </div>\n            </button>`;\n    UI.initProjectButtons();\n  }\n  static createTask(name, dueDate) {\n    const tasksList = document.getElementById('tasks-list');\n    if (!tasksList) {\n      console.error(\"Tasks list element not found!\");\n      return;\n    }\n    const taskElement = document.createElement('button');\n    taskElement.className = 'button-task';\n    taskElement.setAttribute('data-task-button', '');\n    taskElement.innerHTML = `\n            <div class=\"left-task-panel\">\n                <img src=\"${_img_checkbox_svg__WEBPACK_IMPORTED_MODULE_4__}\" class=\"checkbox-icon\" alt=\"Complete Task\" style=\"width: 20px; height: 20px; cursor: pointer;\"/>\n                <p class=\"task-content\">${name}</p>\n                <input type=\"text\" class=\"input-task-name\" data-input-task-name style=\"display: none;\"/>\n            </div>\n            <div class=\"right-task-panel\">\n                <p class=\"due-date\">${dueDate || 'No date'}</p>\n                <input type=\"date\" class=\"input-due-date\" data-input-due-date style=\"display: none;\"/>\n                <img src=\"${_img_delete_svg__WEBPACK_IMPORTED_MODULE_5__}\" class=\"delete-icon\" alt=\"Delete Task\" style=\"width: 20px; height: 20px; cursor: pointer;\"/>\n            </div>`;\n    taskElement.querySelector('.task-content').addEventListener('dblclick', function () {\n      UI.openEditTaskName(taskElement);\n    });\n    tasksList.appendChild(taskElement);\n    UI.initTaskButtons();\n  }\n  static clear() {\n    UI.clearProjectPreview();\n    UI.clearProjects();\n    UI.clearTasks();\n  }\n  static clearProjectPreview() {\n    const projectPreview = document.getElementById('project-preview');\n    projectPreview.textContent = '';\n  }\n  static clearProjects() {\n    const projectsList = document.getElementById('projects-list');\n    projectsList.textContent = '';\n  }\n  static clearTasks() {\n    const tasksList = document.getElementById('tasks-list');\n    if (tasksList) {\n      tasksList.textContent = '';\n    }\n  }\n  static closeAllPopups() {\n    UI.closeAddProjectPopup();\n    const addTaskButton = document.getElementById('button-add-task');\n    if (addTaskButton) {\n      UI.closeAddTaskPopup();\n    }\n    if (document.getElementById('tasks-list') && document.getElementById('tasks-list').innerHTML !== '') {\n      UI.closeAllInputs();\n    }\n  }\n  static closeAllInputs() {\n    const taskButtons = document.querySelectorAll('[data-task-button]');\n    taskButtons.forEach(button => {\n      UI.closeRenameInput(button);\n      UI.closeSetDateInput(button);\n    });\n  }\n  static handleKeyboardInput(e) {\n    if (e.key === 'Escape') UI.closeAllPopups();\n  }\n  static initAddProjectButtons() {\n    const addProjectButton = document.getElementById('button-add-project');\n    const addProjectPopupButton = document.getElementById('button-add-project-popup');\n    const cancelProjectPopupButton = document.getElementById('button-cancel-project-popup');\n    const addProjectPopupInput = document.getElementById('input-add-project-popup');\n    addProjectButton.addEventListener('click', UI.openAddProjectPopup);\n    addProjectPopupButton.addEventListener('click', UI.addProject);\n    cancelProjectPopupButton.addEventListener('click', UI.closeAddProjectPopup);\n    addProjectPopupInput.addEventListener('keypress', UI.handleAddProjectPopupInput);\n  }\n  static initEditProjectName() {\n    const projectButtons = document.querySelectorAll('.button-project');\n    projectButtons.forEach(button => {\n      const projectNameSpan = button.querySelector('span');\n      projectNameSpan.addEventListener('dblclick', function (e) {\n        const currentName = this.textContent;\n        const input = document.createElement('input');\n        input.type = 'text';\n        input.value = currentName;\n        input.className = 'edit-project-name';\n        input.addEventListener('keypress', function (e) {\n          if (e.key === 'Enter') {\n            const newName = this.value.trim();\n            if (!newName) {\n              alert(\"Project name cannot be empty\");\n              return;\n            }\n            try {\n              const todoList = _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList();\n              if (todoList.contains(newName) && newName !== currentName) {\n                alert(\"A project with this name already exists\");\n                return;\n              }\n              const project = todoList.getProject(currentName);\n              project.setName(newName);\n              _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].saveTodoList(todoList);\n\n              // Update the project name in the sidebar\n              projectNameSpan.textContent = newName;\n\n              // Update the project name in the header if this is the currently active project\n              const projectHeader = document.getElementById('project-name');\n              if (projectHeader && projectHeader.textContent === currentName) {\n                projectHeader.textContent = newName;\n              }\n\n              // If this project button is active, update its content\n              if (button.classList.contains('active')) {\n                UI.loadProjectContent(newName);\n              }\n              this.remove();\n              projectNameSpan.style.display = 'inline';\n            } catch (error) {\n              console.error('Error renaming project:', error);\n              alert('Failed to rename project. Please try again.');\n            }\n          }\n        });\n        this.style.display = 'none';\n        this.parentNode.insertBefore(input, this);\n        input.focus();\n      });\n    });\n  }\n  static openAddProjectPopup() {\n    const addProjectPopup = document.getElementById('add-project-popup');\n    const addProjectButton = document.getElementById('button-add-project');\n    const addProjectInput = document.getElementById('input-add-project-popup');\n    if (!addProjectPopup || !addProjectButton || !addProjectInput) {\n      console.error(\"Required elements not found\");\n      return;\n    }\n\n    // Clear any previous value before showing popup\n    addProjectInput.value = '';\n    UI.closeAllPopups();\n    addProjectPopup.classList.add('active');\n    addProjectButton.classList.add('active');\n    addProjectInput.focus();\n  }\n  static closeAddProjectPopup() {\n    const addProjectPopup = document.getElementById('add-project-popup');\n    const addProjectButton = document.getElementById('button-add-project');\n    const addProjectPopupInput = document.getElementById('input-add-project-popup');\n    if (addProjectPopup) addProjectPopup.classList.remove('active');\n    if (addProjectButton) addProjectButton.classList.remove('active');\n    if (addProjectPopupInput) addProjectPopupInput.value = '';\n  }\n  static addProject() {\n    const addProjectPopupInput = document?.getElementById('input-add-project-popup');\n    const projectName = addProjectPopupInput?.value.trim();\n    if (!projectName) {\n      alert(\"Project name can't be empty\");\n      return;\n    }\n    try {\n      const todoList = _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList();\n      if (todoList.contains(projectName)) {\n        alert(\"A project with this name already exists\");\n        return;\n      }\n      const newProject = new _Project__WEBPACK_IMPORTED_MODULE_1__[\"default\"](projectName);\n      _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addProject(newProject); // Remove error handling from Storage class\n      UI.createProject(projectName);\n      UI.closeAddProjectPopup();\n    } catch (error) {\n      // Only show error here, not in Storage class\n      console.error(\"Error adding project:\", error);\n    }\n  }\n  static openInboxTasks() {\n    UI.openProject('Inbox', this);\n  }\n  static openTodayTasks() {\n    _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateTodayProject();\n    UI.openProject('Today', this);\n  }\n  static openWeekTasks() {\n    _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateWeekProject();\n    UI.openProject('This week', this);\n  }\n  static handleProjectButton(e) {\n    const projectName = this.children[0].children[1].textContent;\n    if (e.target.classList.contains('delete-icon')) {\n      UI.deleteProject(projectName, this);\n      return;\n    }\n    UI.openProject(projectName, this);\n  }\n  static openProject(projectName, projectButton) {\n    const defaultProjectButtons = document.querySelectorAll('.button-default-project');\n    const projectButtons = document.querySelectorAll('.button-project');\n    const buttons = [...defaultProjectButtons, ...projectButtons];\n    buttons.forEach(button => button.classList.remove('active'));\n    projectButton.classList.add('active');\n    UI.closeAddProjectPopup();\n    UI.loadProjectContent(projectName);\n  }\n  static deleteProject(projectName, button) {\n    if (button.classList.contains('active')) UI.clearProjectPreview();\n    _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteProject(projectName);\n    UI.clearProjects();\n    UI.loadProjects();\n  }\n  static initAddTaskButtons() {\n    console.log(\"🔍 Initializing Add Task Buttons\");\n    const addTaskButton = document.getElementById('button-add-task');\n    const addTaskPopupButton = document.getElementById('button-add-task-popup');\n    const cancelTaskPopupButton = document.getElementById('button-cancel-task-popup');\n    const addTaskPopupInput = document.getElementById('input-add-task-popup');\n    if (addTaskButton) addTaskButton.addEventListener('click', UI.openAddTaskPopup);\n    if (addTaskPopupButton) addTaskPopupButton.addEventListener('click', UI.addTask);\n    if (cancelTaskPopupButton) cancelTaskPopupButton.addEventListener('click', UI.closeAddTaskPopup);\n    if (addTaskPopupInput) addTaskPopupInput.addEventListener('keypress', UI.handleAddTaskPopupInput);\n  }\n  static openAddTaskPopup() {\n    const addTaskPopup = document.getElementById('add-task-popup');\n    const addTaskButton = document.getElementById('button-add-task');\n    if (!addTaskPopup || !addTaskButton) return;\n    UI.closeAllPopups();\n    addTaskPopup.style.display = 'flex';\n    addTaskButton.classList.add('active');\n  }\n  static closeAddTaskPopup() {\n    const addTaskPopup = document.getElementById('add-task-popup');\n    const addTaskButton = document.getElementById('button-add-task');\n    const addTaskInput = document.getElementById('input-add-task-popup');\n    if (addTaskPopup) addTaskPopup.style.display = 'none';\n    if (addTaskButton) addTaskButton.classList.remove('active');\n    if (addTaskInput) addTaskInput.value = '';\n  }\n  static addTask() {\n    const projectName = document.getElementById('project-name')?.textContent;\n    const addTaskPopupInput = document.getElementById('input-add-task-popup');\n    if (!projectName || !addTaskPopupInput) {\n      console.error(\"Required elements not found\");\n      return;\n    }\n    const taskName = addTaskPopupInput.value.trim();\n    if (!taskName) {\n      alert(\"Task name can't be empty\");\n      return;\n    }\n    try {\n      const todoList = _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList();\n      const project = todoList.getProject(projectName);\n      if (!project) {\n        throw new Error(`Project \"${projectName}\" not found`);\n      }\n      if (project.contains(taskName)) {\n        alert('Task names must be different within the same project');\n        return;\n      }\n      const task = new _Task__WEBPACK_IMPORTED_MODULE_2__[\"default\"](taskName, 'No date');\n      _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addTask(projectName, task);\n      UI.createTask(taskName, 'No date');\n      UI.closeAddTaskPopup();\n      addTaskPopupInput.value = '';\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n      alert(error.message);\n    }\n  }\n  static handleAddTaskPopupInput(e) {\n    if (e.key === 'Enter') UI.addTask();\n  }\n  static handleAddProjectPopupInput(e) {\n    if (e.key === 'Enter') {\n      UI.addProject();\n    }\n  }\n  static initTaskButtons() {\n    const taskButtons = document.querySelectorAll('[data-task-button]');\n    const taskNameInputs = document.querySelectorAll('[data-input-task-name]');\n    const dueDateInputs = document.querySelectorAll('[data-input-due-date]');\n    taskButtons.forEach(taskButton => taskButton.addEventListener('click', UI.handleTaskButton));\n    taskNameInputs.forEach(taskNameInput => {\n      taskNameInput.removeEventListener('keypress', UI.renameTask);\n      taskNameInput.addEventListener('keypress', UI.renameTask);\n    });\n    dueDateInputs.forEach(dueDateInput => {\n      dueDateInput.removeEventListener('change', UI.setTaskDate);\n      dueDateInput.removeEventListener('keypress', UI.setTaskDate);\n      dueDateInput.addEventListener('change', UI.setTaskDate);\n      dueDateInput.addEventListener('keypress', UI.setTaskDate);\n    });\n  }\n  static initProjectButtons() {\n    const inboxProjectButton = document.getElementById('button-inbox-projects');\n    const todayProjectButton = document.getElementById('button-today-projects');\n    const weekProjectButton = document.getElementById('button-week-projects');\n    const projectButtons = document.querySelectorAll('[data-project-button]');\n    if (inboxProjectButton) inboxProjectButton.addEventListener('click', UI.openInboxTasks);\n    if (todayProjectButton) todayProjectButton.addEventListener('click', UI.openTodayTasks);\n    if (weekProjectButton) weekProjectButton.addEventListener('click', UI.openWeekTasks);\n    projectButtons.forEach(projectButton => projectButton.addEventListener('click', UI.handleProjectButton));\n  }\n  static openEditTaskName(taskButton) {\n    const taskNameElement = taskButton.querySelector('.task-content');\n    const taskNameInput = taskButton.querySelector('.input-task-name');\n    taskNameElement.style.display = 'none';\n    taskNameInput.style.display = 'block';\n    taskNameInput.value = taskNameElement.textContent;\n    taskNameInput.focus();\n    taskNameInput.addEventListener('keypress', UI.renameTask);\n    taskNameInput.addEventListener('blur', function () {\n      UI.closeRenameInput(taskButton);\n    });\n  }\n  static handleTaskButton(e) {\n    if (e.target.closest('.checkbox-icon')) {\n      UI.toggleTaskCompleted(this);\n      return;\n    }\n    if (e.target.closest('.delete-icon')) {\n      UI.deleteTask(this);\n      return;\n    }\n    if (e.target.classList.contains('task-content')) {\n      UI.openEditTaskName(this);\n      return;\n    }\n    if (e.target.classList.contains('due-date')) {\n      UI.openSetDateInput(this);\n    }\n  }\n  static toggleTaskCompleted(taskButton) {\n    const projectName = document.getElementById('project-name').textContent;\n    const taskName = taskButton.children[0].children[1].textContent;\n    const taskText = taskButton.children[0].children[1];\n    const taskIcon = taskButton.children[0].children[0];\n\n    // Toggle completed state\n    const isCompleted = taskText.style.textDecoration === 'line-through';\n    const newCompletedState = !isCompleted;\n\n    // Update visual state\n    taskText.style.textDecoration = newCompletedState ? 'line-through' : 'none';\n    taskIcon.style.color = newCompletedState ? 'green' : 'currentColor';\n\n    // Update storage\n    const todoList = _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList();\n    let targetProject = projectName;\n    let targetTaskName = taskName;\n    if (projectName === 'Today' || projectName === 'This week') {\n      const parentProjectName = taskName.split('(')[1].split(')')[0];\n      targetProject = parentProjectName;\n      targetTaskName = taskName.split(' ')[0];\n    }\n    const project = todoList.getProject(targetProject);\n    const task = project.getTask(targetTaskName);\n    if (task) {\n      task.setCompleted(newCompletedState);\n      _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].saveTodoList(todoList);\n\n      // Update Today/Week views if necessary\n      if (projectName === 'Today') {\n        _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateTodayProject();\n      } else if (projectName === 'This week') {\n        _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateWeekProject();\n      }\n    }\n  }\n  static deleteTask(taskButton) {\n    const projectName = document.getElementById('project-name').textContent;\n    const taskName = taskButton.children[0].children[1].textContent;\n    try {\n      if (projectName === 'Today' || projectName === 'This week') {\n        const parentProjectName = taskName.split('(')[1].split(')')[0];\n        const mainTaskName = taskName.split(' ')[0];\n        _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteTask(parentProjectName, mainTaskName);\n        if (projectName === 'Today') {\n          _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateTodayProject();\n        } else {\n          _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateWeekProject();\n        }\n      } else {\n        _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteTask(projectName, taskName);\n      }\n      taskButton.remove();\n      UI.clearTasks();\n      UI.loadTasks(projectName);\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      alert('Failed to delete task. Please try again.');\n    }\n  }\n  static setTaskCompleted(taskButton) {\n    const projectName = document.getElementById('project-name').textContent;\n    const taskName = taskButton.children[0].children[1].textContent;\n\n    // Handle task deletion in different project contexts\n    if (projectName === 'Today' || projectName === 'This week') {\n      const parentProjectName = taskName.split('(')[1].split(')')[0];\n      _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteTask(parentProjectName, taskName.split(' ')[0]);\n      if (projectName === 'Today') {\n        _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateTodayProject();\n      } else {\n        _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateWeekProject();\n      }\n    } else {\n      _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteTask(projectName, taskName);\n    }\n\n    // Apply completion styles\n    const taskText = taskButton.children[0].children[1];\n    const checkboxIcon = taskButton.children[0].children[0];\n    taskText.style.textDecoration = \"line-through\";\n    checkboxIcon.style.filter = \"invert(48%) sepia(79%) saturate(2476%) hue-rotate(86deg) brightness(118%) contrast(119%)\"; // This creates a green color\n\n    // Add a short delay before removing the task\n    setTimeout(() => {\n      UI.clearTasks();\n      UI.loadTasks(projectName);\n    }, 1000); // 1 second delay to show the completion state\n  }\n  static closeRenameInput(taskButton) {\n    const taskNameElement = taskButton.querySelector('.task-content');\n    const taskNameInput = taskButton.querySelector('.input-task-name');\n    taskNameElement.style.display = 'block';\n    taskNameInput.style.display = 'none';\n  }\n  static closeSetDateInput(taskButton) {\n    const dueDate = taskButton.querySelector('.due-date');\n    const dueDateInput = taskButton.querySelector('.input-due-date');\n    dueDate.style.display = 'block';\n    dueDateInput.style.display = 'none';\n  }\n  static renameTask(e) {\n    if (e.key !== 'Enter') return;\n    const taskNameInput = e.target;\n    const taskButton = taskNameInput.closest('.button-task');\n    const taskNameElement = taskButton.querySelector('.task-content');\n    const projectName = document.getElementById('project-name').textContent;\n    const oldTaskName = taskNameElement.textContent;\n    const newTaskName = taskNameInput.value.trim();\n    if (!newTaskName) {\n      alert(\"Task name cannot be empty\");\n      return;\n    }\n    try {\n      const todoList = _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTodoList();\n      const project = todoList.getProject(projectName);\n      if (!project) {\n        throw new Error(`Project \"${projectName}\" not found`);\n      }\n      if (project.contains(newTaskName) && newTaskName !== oldTaskName) {\n        alert('Task names must be unique within the same project');\n        return;\n      }\n      _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].renameTask(projectName, oldTaskName, newTaskName);\n      taskNameElement.textContent = newTaskName;\n      UI.closeRenameInput(taskButton);\n    } catch (error) {\n      console.error('Error renaming task:', error);\n      alert('Failed to rename task. Please try again.');\n      UI.closeRenameInput(taskButton);\n    }\n  }\n  static openSetDateInput(taskButton) {\n    const dueDate = taskButton.querySelector('.due-date');\n    const dueDateInput = taskButton.querySelector('.input-due-date');\n    const currentDateText = dueDate.textContent;\n    if (currentDateText && currentDateText !== 'No date') {\n      const [day, month, year] = currentDateText.split('/');\n      const formattedDate = `${year}-${month}-${day}`;\n      dueDateInput.value = formattedDate;\n    } else {\n      const today = new Date();\n      const year = today.getFullYear();\n      const month = String(today.getMonth() + 1).padStart(2, '0');\n      const day = String(today.getDate()).padStart(2, '0');\n      dueDateInput.value = `${year}-${month}-${day}`;\n    }\n    UI.closeAllPopups();\n    dueDate.style.display = 'none';\n    dueDateInput.style.display = 'block';\n    dueDateInput.focus();\n    dueDateInput.addEventListener('change', UI.setTaskDate);\n    dueDateInput.addEventListener('keypress', UI.setTaskDate);\n    dueDateInput.addEventListener('blur', () => UI.closeSetDateInput(taskButton));\n  }\n  static setTaskDate(e) {\n    if (e.type === 'keypress' && e.key !== 'Enter') return;\n    try {\n      const taskButton = this.closest('.button-task');\n      const projectName = document.getElementById('project-name').textContent;\n      const taskName = taskButton.querySelector('.task-content').textContent;\n      const inputValue = this.value;\n      if (!inputValue) return;\n      const [year, month, day] = inputValue.split('-').map(num => parseInt(num, 10));\n      const inputDate = new Date(year, month - 1, day);\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      if (inputValue.length === 10) {\n        if (isNaN(inputDate.getTime()) || inputDate < today) {\n          alert(\"Please select a valid date today or in the future\");\n          return;\n        }\n        const formattedDate = `${String(day).padStart(2, '0')}/${String(month).padStart(2, '0')}/${year}`;\n        if (projectName === 'Today' || projectName === 'This week') {\n          const mainProjectName = taskName.split('(')[1].split(')')[0];\n          const mainTaskName = taskName.split(' ')[0];\n          _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setTaskDate(projectName, taskName, formattedDate);\n          _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setTaskDate(mainProjectName, mainTaskName, formattedDate);\n          if (projectName === 'Today') {\n            _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateTodayProject();\n          } else {\n            _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateWeekProject();\n          }\n        } else {\n          _Storage__WEBPACK_IMPORTED_MODULE_0__[\"default\"].setTaskDate(projectName, taskName, formattedDate);\n        }\n        UI.clearTasks();\n        UI.loadTasks(projectName);\n        UI.closeSetDateInput(taskButton);\n      }\n    } catch (error) {\n      console.error('Error setting task date:', error);\n      if (inputValue.length === 10) {\n        alert('Failed to set task date. Please try again.');\n      }\n    }\n  }\n}\n\n//# sourceURL=webpack://to-do-list/./src/JS/modules/UI.js?");

/***/ }),

/***/ "./src/CSS/styles.css":
/*!****************************!*\
  !*** ./src/CSS/styles.css ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://to-do-list/./src/CSS/styles.css?");

/***/ }),

/***/ "./src/img/add-task.svg":
/*!******************************!*\
  !*** ./src/img/add-task.svg ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"images/add-task.3cffe9a515498593b872.svg\";\n\n//# sourceURL=webpack://to-do-list/./src/img/add-task.svg?");

/***/ }),

/***/ "./src/img/calendar-today.svg":
/*!************************************!*\
  !*** ./src/img/calendar-today.svg ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"images/calendar-today.233385e32206cd372d69.svg\";\n\n//# sourceURL=webpack://to-do-list/./src/img/calendar-today.svg?");

/***/ }),

/***/ "./src/img/calendar-week.svg":
/*!***********************************!*\
  !*** ./src/img/calendar-week.svg ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"images/calendar-week.518ff47ec29e1552eabd.svg\";\n\n//# sourceURL=webpack://to-do-list/./src/img/calendar-week.svg?");

/***/ }),

/***/ "./src/img/checkbox.svg":
/*!******************************!*\
  !*** ./src/img/checkbox.svg ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"images/checkbox.d36e9ec383d7e4468c86.svg\";\n\n//# sourceURL=webpack://to-do-list/./src/img/checkbox.svg?");

/***/ }),

/***/ "./src/img/delete.svg":
/*!****************************!*\
  !*** ./src/img/delete.svg ***!
  \****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"images/delete.bde675c38d54979f589e.svg\";\n\n//# sourceURL=webpack://to-do-list/./src/img/delete.svg?");

/***/ }),

/***/ "./src/img/inbox.svg":
/*!***************************!*\
  !*** ./src/img/inbox.svg ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"images/inbox.939f2a757e3335be71bb.svg\";\n\n//# sourceURL=webpack://to-do-list/./src/img/inbox.svg?");

/***/ }),

/***/ "./src/img/plus-box.svg":
/*!******************************!*\
  !*** ./src/img/plus-box.svg ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"images/plus-box.632e3e6e475491f5786a.svg\";\n\n//# sourceURL=webpack://to-do-list/./src/img/plus-box.svg?");

/***/ }),

/***/ "./src/img/project.svg":
/*!*****************************!*\
  !*** ./src/img/project.svg ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"images/project.3cc69f105a1d39010f96.svg\";\n\n//# sourceURL=webpack://to-do-list/./src/img/project.svg?");

/***/ }),

/***/ "./node_modules/date-fns/_lib/defaultOptions.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/_lib/defaultOptions.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultOptions: () => (/* binding */ getDefaultOptions),\n/* harmony export */   setDefaultOptions: () => (/* binding */ setDefaultOptions)\n/* harmony export */ });\nlet defaultOptions = {};\n\nfunction getDefaultOptions() {\n  return defaultOptions;\n}\n\nfunction setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/_lib/defaultOptions.js?");

/***/ }),

/***/ "./node_modules/date-fns/_lib/normalizeDates.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/_lib/normalizeDates.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizeDates: () => (/* binding */ normalizeDates)\n/* harmony export */ });\n/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constructFrom.js */ \"./node_modules/date-fns/constructFrom.js\");\n\n\nfunction normalizeDates(context, ...dates) {\n  const normalize = _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__.constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/_lib/normalizeDates.js?");

/***/ }),

/***/ "./node_modules/date-fns/addDays.js":
/*!******************************************!*\
  !*** ./node_modules/date-fns/addDays.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addDays: () => (/* binding */ addDays),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constructFrom.js */ \"./node_modules/date-fns/constructFrom.js\");\n/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ \"./node_modules/date-fns/toDate.js\");\n\n\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nfunction addDays(date, amount, options) {\n  const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options?.in);\n  if (isNaN(amount)) return (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_1__.constructFrom)(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addDays);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/addDays.js?");

/***/ }),

/***/ "./node_modules/date-fns/compareAsc.js":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/compareAsc.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareAsc: () => (/* binding */ compareAsc),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ \"./node_modules/date-fns/toDate.js\");\n\n\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param dateLeft - The first date to compare\n * @param dateRight - The second date to compare\n *\n * @returns The result of the comparison\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nfunction compareAsc(dateLeft, dateRight) {\n  const diff = +(0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateLeft) - +(0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateRight);\n\n  if (diff < 0) return -1;\n  else if (diff > 0) return 1;\n\n  // Return 0 if diff is 0; return NaN if diff is NaN\n  return diff;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (compareAsc);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/compareAsc.js?");

/***/ }),

/***/ "./node_modules/date-fns/constants.js":
/*!********************************************!*\
  !*** ./node_modules/date-fns/constants.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   constructFromSymbol: () => (/* binding */ constructFromSymbol),\n/* harmony export */   daysInWeek: () => (/* binding */ daysInWeek),\n/* harmony export */   daysInYear: () => (/* binding */ daysInYear),\n/* harmony export */   maxTime: () => (/* binding */ maxTime),\n/* harmony export */   millisecondsInDay: () => (/* binding */ millisecondsInDay),\n/* harmony export */   millisecondsInHour: () => (/* binding */ millisecondsInHour),\n/* harmony export */   millisecondsInMinute: () => (/* binding */ millisecondsInMinute),\n/* harmony export */   millisecondsInSecond: () => (/* binding */ millisecondsInSecond),\n/* harmony export */   millisecondsInWeek: () => (/* binding */ millisecondsInWeek),\n/* harmony export */   minTime: () => (/* binding */ minTime),\n/* harmony export */   minutesInDay: () => (/* binding */ minutesInDay),\n/* harmony export */   minutesInHour: () => (/* binding */ minutesInHour),\n/* harmony export */   minutesInMonth: () => (/* binding */ minutesInMonth),\n/* harmony export */   minutesInYear: () => (/* binding */ minutesInYear),\n/* harmony export */   monthsInQuarter: () => (/* binding */ monthsInQuarter),\n/* harmony export */   monthsInYear: () => (/* binding */ monthsInYear),\n/* harmony export */   quartersInYear: () => (/* binding */ quartersInYear),\n/* harmony export */   secondsInDay: () => (/* binding */ secondsInDay),\n/* harmony export */   secondsInHour: () => (/* binding */ secondsInHour),\n/* harmony export */   secondsInMinute: () => (/* binding */ secondsInMinute),\n/* harmony export */   secondsInMonth: () => (/* binding */ secondsInMonth),\n/* harmony export */   secondsInQuarter: () => (/* binding */ secondsInQuarter),\n/* harmony export */   secondsInWeek: () => (/* binding */ secondsInWeek),\n/* harmony export */   secondsInYear: () => (/* binding */ secondsInYear)\n/* harmony export */ });\n/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nconst daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nconst daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nconst maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nconst minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nconst millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nconst millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nconst millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nconst millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nconst millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nconst minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nconst minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nconst minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nconst minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nconst monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nconst monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nconst quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nconst secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nconst secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nconst secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nconst secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nconst secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nconst secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nconst secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nconst constructFromSymbol = Symbol.for(\"constructDateFrom\");\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/constants.js?");

/***/ }),

/***/ "./node_modules/date-fns/constructFrom.js":
/*!************************************************!*\
  !*** ./node_modules/date-fns/constructFrom.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   constructFrom: () => (/* binding */ constructFrom),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/date-fns/constants.js\");\n\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nfunction constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && _constants_js__WEBPACK_IMPORTED_MODULE_0__.constructFromSymbol in date)\n    return date[_constants_js__WEBPACK_IMPORTED_MODULE_0__.constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (constructFrom);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/constructFrom.js?");

/***/ }),

/***/ "./node_modules/date-fns/constructNow.js":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/constructNow.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   constructNow: () => (/* binding */ constructNow),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constructFrom.js */ \"./node_modules/date-fns/constructFrom.js\");\n\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from 'date-fns'\n *\n * function isToday<DateType extends Date>(\n *   date: DateArg<DateType>,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nfunction constructNow(date) {\n  return (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_0__.constructFrom)(date, Date.now());\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (constructNow);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/constructNow.js?");

/***/ }),

/***/ "./node_modules/date-fns/isSameDay.js":
/*!********************************************!*\
  !*** ./node_modules/date-fns/isSameDay.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   isSameDay: () => (/* binding */ isSameDay)\n/* harmony export */ });\n/* harmony import */ var _lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/normalizeDates.js */ \"./node_modules/date-fns/_lib/normalizeDates.js\");\n/* harmony import */ var _startOfDay_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./startOfDay.js */ \"./node_modules/date-fns/startOfDay.js\");\n\n\n\n/**\n * The {@link isSameDay} function options.\n */\n\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * @param laterDate - The first date to check\n * @param earlierDate - The second date to check\n * @param options - An object with options\n *\n * @returns The dates are in the same day (and year and month)\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n *\n * @example\n * // Are 4 September and 4 October in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n *\n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\nfunction isSameDay(laterDate, earlierDate, options) {\n  const [dateLeft_, dateRight_] = (0,_lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__.normalizeDates)(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n  return +(0,_startOfDay_js__WEBPACK_IMPORTED_MODULE_1__.startOfDay)(dateLeft_) === +(0,_startOfDay_js__WEBPACK_IMPORTED_MODULE_1__.startOfDay)(dateRight_);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isSameDay);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/isSameDay.js?");

/***/ }),

/***/ "./node_modules/date-fns/isSameWeek.js":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/isSameWeek.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   isSameWeek: () => (/* binding */ isSameWeek)\n/* harmony export */ });\n/* harmony import */ var _lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/normalizeDates.js */ \"./node_modules/date-fns/_lib/normalizeDates.js\");\n/* harmony import */ var _startOfWeek_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./startOfWeek.js */ \"./node_modules/date-fns/startOfWeek.js\");\n\n\n\n/**\n * The {@link isSameWeek} function options.\n */\n\n/**\n * @name isSameWeek\n * @category Week Helpers\n * @summary Are the given dates in the same week (and month and year)?\n *\n * @description\n * Are the given dates in the same week (and month and year)?\n *\n * @param laterDate - The first date to check\n * @param earlierDate - The second date to check\n * @param options - An object with options\n *\n * @returns The dates are in the same week (and month and year)\n *\n * @example\n * // Are 31 August 2014 and 4 September 2014 in the same week?\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))\n * //=> true\n *\n * @example\n * // If week starts with Monday,\n * // are 31 August 2014 and 4 September 2014 in the same week?\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {\n *   weekStartsOn: 1\n * })\n * //=> false\n *\n * @example\n * // Are 1 January 2014 and 1 January 2015 in the same week?\n * const result = isSameWeek(new Date(2014, 0, 1), new Date(2015, 0, 1))\n * //=> false\n */\nfunction isSameWeek(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = (0,_lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__.normalizeDates)(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n  return (\n    +(0,_startOfWeek_js__WEBPACK_IMPORTED_MODULE_1__.startOfWeek)(laterDate_, options) === +(0,_startOfWeek_js__WEBPACK_IMPORTED_MODULE_1__.startOfWeek)(earlierDate_, options)\n  );\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isSameWeek);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/isSameWeek.js?");

/***/ }),

/***/ "./node_modules/date-fns/isThisWeek.js":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/isThisWeek.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   isThisWeek: () => (/* binding */ isThisWeek)\n/* harmony export */ });\n/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constructFrom.js */ \"./node_modules/date-fns/constructFrom.js\");\n/* harmony import */ var _constructNow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constructNow.js */ \"./node_modules/date-fns/constructNow.js\");\n/* harmony import */ var _isSameWeek_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isSameWeek.js */ \"./node_modules/date-fns/isSameWeek.js\");\n\n\n\n\n/**\n * The {@link isThisWeek} function options.\n */\n\n/**\n * @name isThisWeek\n * @category Week Helpers\n * @summary Is the given date in the same week as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same week as the current date?\n *\n * @param date - The date to check\n * @param options - The object with options\n *\n * @returns The date is in this week\n *\n * @example\n * // If today is 25 September 2014, is 21 September 2014 in this week?\n * const result = isThisWeek(new Date(2014, 8, 21))\n * //=> true\n *\n * @example\n * // If today is 25 September 2014 and week starts with Monday\n * // is 21 September 2014 in this week?\n * const result = isThisWeek(new Date(2014, 8, 21), { weekStartsOn: 1 })\n * //=> false\n */\nfunction isThisWeek(date, options) {\n  return (0,_isSameWeek_js__WEBPACK_IMPORTED_MODULE_0__.isSameWeek)(\n    (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_1__.constructFrom)(options?.in || date, date),\n    (0,_constructNow_js__WEBPACK_IMPORTED_MODULE_2__.constructNow)(options?.in || date),\n    options,\n  );\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isThisWeek);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/isThisWeek.js?");

/***/ }),

/***/ "./node_modules/date-fns/isToday.js":
/*!******************************************!*\
  !*** ./node_modules/date-fns/isToday.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   isToday: () => (/* binding */ isToday)\n/* harmony export */ });\n/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constructFrom.js */ \"./node_modules/date-fns/constructFrom.js\");\n/* harmony import */ var _constructNow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constructNow.js */ \"./node_modules/date-fns/constructNow.js\");\n/* harmony import */ var _isSameDay_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isSameDay.js */ \"./node_modules/date-fns/isSameDay.js\");\n\n\n\n\n/**\n * The {@link isToday} function options.\n */\n\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * @param date - The date to check\n * @param options - An object with options\n *\n * @returns The date is today\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * const result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\nfunction isToday(date, options) {\n  return (0,_isSameDay_js__WEBPACK_IMPORTED_MODULE_0__.isSameDay)(\n    (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_1__.constructFrom)(options?.in || date, date),\n    (0,_constructNow_js__WEBPACK_IMPORTED_MODULE_2__.constructNow)(options?.in || date),\n  );\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isToday);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/isToday.js?");

/***/ }),

/***/ "./node_modules/date-fns/startOfDay.js":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/startOfDay.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   startOfDay: () => (/* binding */ startOfDay)\n/* harmony export */ });\n/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ \"./node_modules/date-fns/toDate.js\");\n\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nfunction startOfDay(date, options) {\n  const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (startOfDay);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/startOfDay.js?");

/***/ }),

/***/ "./node_modules/date-fns/startOfWeek.js":
/*!**********************************************!*\
  !*** ./node_modules/date-fns/startOfWeek.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   startOfWeek: () => (/* binding */ startOfWeek)\n/* harmony export */ });\n/* harmony import */ var _lib_defaultOptions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/defaultOptions.js */ \"./node_modules/date-fns/_lib/defaultOptions.js\");\n/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDate.js */ \"./node_modules/date-fns/toDate.js\");\n\n\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfWeek(date, options) {\n  const defaultOptions = (0,_lib_defaultOptions_js__WEBPACK_IMPORTED_MODULE_0__.getDefaultOptions)();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_1__.toDate)(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (startOfWeek);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/startOfWeek.js?");

/***/ }),

/***/ "./node_modules/date-fns/subDays.js":
/*!******************************************!*\
  !*** ./node_modules/date-fns/subDays.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   subDays: () => (/* binding */ subDays)\n/* harmony export */ });\n/* harmony import */ var _addDays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addDays.js */ \"./node_modules/date-fns/addDays.js\");\n\n\n/**\n * The {@link subDays} function options.\n */\n\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be subtracted.\n * @param options - An object with options\n *\n * @returns The new date with the days subtracted\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\nfunction subDays(date, amount, options) {\n  return (0,_addDays_js__WEBPACK_IMPORTED_MODULE_0__.addDays)(date, -amount, options);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (subDays);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/subDays.js?");

/***/ }),

/***/ "./node_modules/date-fns/toDate.js":
/*!*****************************************!*\
  !*** ./node_modules/date-fns/toDate.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   toDate: () => (/* binding */ toDate)\n/* harmony export */ });\n/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constructFrom.js */ \"./node_modules/date-fns/constructFrom.js\");\n\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nfunction toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_0__.constructFrom)(context || argument, argument);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toDate);\n\n\n//# sourceURL=webpack://to-do-list/./node_modules/date-fns/toDate.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/JS/index.js");
/******/ 	
/******/ })()
;